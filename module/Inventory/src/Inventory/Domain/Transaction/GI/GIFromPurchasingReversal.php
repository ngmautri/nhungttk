<?php
namespace Inventory\Domain\Transaction\GI;

use Application\Application\Event\DefaultParameter;
use Application\Domain\Shared\Command\CommandOptions;
use Inventory\Domain\Contracts\AutoGeneratedDocInterface;
use Inventory\Domain\Event\Transaction\GI\WhGiPosted;
use Inventory\Domain\Service\SharedService;
use Inventory\Domain\Transaction\AbstractGoodsIssue;
use Inventory\Domain\Transaction\TrxSnapshot;
use Inventory\Domain\Transaction\Contracts\GoodsReceiptInterface;
use Inventory\Domain\Transaction\Contracts\TrxFlow;
use Inventory\Domain\Transaction\Contracts\TrxType;
use Inventory\Domain\Transaction\Validator\ValidatorFactory;
use Procure\Domain\GoodsReceipt\GRRow;
use Procure\Domain\GoodsReceipt\GenericGR;
use Procure\Domain\Shared\ProcureDocStatus;

/**
 *
 * @author Nguyen Mau Tri - ngmautri@gmail.com
 *
 */
class GIFromPurchasingReversal extends AbstractGoodsIssue implements GoodsReceiptInterface, AutoGeneratedDocInterface
{

    /**
     *
     * {@inheritdoc}
     * @see \Inventory\Domain\Transaction\GenericTrx::specify()
     */
    public function specify()
    {
        $this->movementType = TrxType::GI_FOR_PURCHASING_REVERSAL;
        $this->movementFlow = TrxFlow::WH_TRANSACTION_OUT;
    }

    /**
     *
     * @param GenericGR $sourceObj
     * @param CommandOptions $options
     * @param SharedService $sharedService
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @return \Inventory\Domain\Transaction\GI\GIFromPurchasingReversal
     */
    public static function postCopyFromProcureGRReversal(GenericGR $sourceObj, CommandOptions $options, SharedService $sharedService)
    {
        if (! $sourceObj instanceof GenericGR) {
            throw new \InvalidArgumentException("GRDoc Entity is required");
        }

        $rows = $sourceObj->getDocRows();

        if ($rows == null) {
            throw new \InvalidArgumentException("GRDoc Entity is empty!");
        }
        if ($options == null) {
            throw new \InvalidArgumentException("No Options is found");
        }

        if ($sourceObj->getDocStatus() != ProcureDocStatus::REVERSED) {
            throw new \InvalidArgumentException("GR document is not reversed yet!");
        }

        /**
         *
         * @var GIFromPurchasingReversal $instance
         */
        $instance = new self();
        $instance = $sourceObj->convertTo($instance);

        // overwrite.
        $instance->specify(); // important.
        $instance->setMovementDate($sourceObj->getPostingDate());
        $validationService = ValidatorFactory::create($instance->getMovementType(), $sharedService);

        $createdBy = $options->getUserId();
        $createdDate = new \DateTime();
        $instance->setBaseDocId($sourceObj->getId());
        $instance->setBaseDocType($sourceObj->getDocType());

        $instance->initDoc($createdBy, date_format($createdDate, 'Y-m-d H:i:s'));
        $instance->markAsPosted($createdBy, $sourceObj->getPostingDate());
        $instance->setRemarks($instance->getRemarks() . \sprintf('[Auto.] Ref.%s', $sourceObj->getSysNumber()));

        foreach ($rows as $r) {

            /**
             *
             * @var GRRow $r ;
             */

            if (! $r->getIsInventoryItem()) {
                continue;
            }

            $grRow = GIFromPurchasingReversalRow::createFromPurchaseGrRowReversal($instance, $r, $options);
            $grRow->markAsPosted($createdBy, date_format($createdDate, 'Y-m-d H:i:s'));

            // caculate COGS
            $valuattionSrv = $sharedService->getValuationService()->getFifoService();
            $cogs = $valuattionSrv->calculateCOGS($instance, $grRow);
            $grRow->setCalculatedCost($cogs);

            $instance->addRow($grRow);
        }

        $instance->validate($validationService);

        if ($instance->hasErrors()) {
            throw new \RuntimeException($instance->getErrorMessage());
        }

        $instance->clearEvents();

        $rep = $sharedService->getPostingService()->getCmdRepository();
        $snapshot = $rep->post($instance, true);

        if (! $snapshot instanceof TrxSnapshot) {
            throw new \RuntimeException(sprintf("Error orcured when creating WH-GR #%s", $instance->getId()));
        }

        $target = $instance;
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($snapshot->getId());
        $defaultParams->setTargetToken($snapshot->getToken());
        $defaultParams->setTargetDocVersion($snapshot->getDocVersion());
        $defaultParams->setTargetRrevisionNo($snapshot->getRevisionNo());
        $defaultParams->setTriggeredBy($options->getTriggeredBy());
        $defaultParams->setUserId($options->getUserId());
        $params = null;

        $event = new WhGiPosted($target, $defaultParams, $params);

        $instance->addEvent($event);
        $instance->updateIdentityFrom($snapshot);

        return $instance;
    }
}