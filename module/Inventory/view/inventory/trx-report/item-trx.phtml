<?php

/**
 *
 * @author Nguyen Mau Tri - ngmautri@gmail.com
 *         ===================================
 */
use Inventory\Application\Export\Transaction\Contracts\SaveAsSupportedType;
use Inventory\Infrastructure\Persistence\Filter\TrxRowReportSqlFilter;

/**
 *
 * @var TrxRowReportSqlFilter $filter ;
 */

$baseUrl = "/inventory/trx-report/item-trx";

$link = "?docMonth=%s&docYear=%s&is_active=%s&sort_by=%s&sort=%s&file_type=%s";
$base = $this->baseUrl . sprintf($link, $filter->getDocMonth(), $filter->getDocYear(), $filter->getIsActive(), $sort_by, $sort, $file_type);

// $toggleUrl = $this->baseUrl . sprintf($link, $baseUrl, $docYear, $balance, $is_active, $sort_by, $sort, $toogleFileType);

$link1 = "/inventory/trx-report/row-status-gird?itemId=%s&docMonth=%s&docYear=%s&is_active=%s&sort_by=%s&sort=%s";
$girdUrl = $this->baseUrl . sprintf($link1, $filter->getItemId(), $filter->getDocMonth(), $filter->getDocYear(), $filter->getIsActive(), $sort_by, $sort);

$filter_url = $baseUrl;
$filtered1 = "M=%s,Y=%s";
$filtered = sprintf($filtered1, $filter->getDocMonth(), $filter->getDocYear());

$url_excel = $this->baseUrl . sprintf($link, $filter->getDocMonth(), $filter->getDocYear(), $filter->getIsActive(), $sort_by, $sort, SaveAsSupportedType::OUTPUT_IN_EXCEL);
$url_oo = $this->baseUrl . sprintf($link, $filter->getDocMonth(), $filter->getDocYear(), $filter->getIsActive(), $sort_by, $sort, SaveAsSupportedType::OUTPUT_IN_OPEN_OFFICE);

// ===============================================================================
?>
<div id="item_trx_gird_div"></div>


<script>

    var columns = [
      
        { title: "Id", dataType: "string", dataIndx: "#", align: 'left',minWidth: 50,editable: true},
        { title: "Date", dataType: "string", dataIndx: "docDate", width: 100,editable: false },
        { title: "Ref", dataType: "string", dataIndx: "sysNumber", align: 'left',minWidth: 120,editable: false},
        { title: "Type", dataType: "string", dataIndx: "transactionType", align: 'left',minWidth: 50,editable: false},        
        { title: "Flow", dataType: "string", dataIndx: "flow", width: 50,editable: false },
        { title: "WH", dataType: "string", dataIndx: "warehouseName", width: 150,editable: false },
        { title: "location", dataType: "decimal", dataIndx: "whLocation", width: 80,editable: false },       
        
        { title: "Qty", dataType: "string", dataIndx: "quantity", width: 50,editable: false },
        { title: "Stock Qty", dataType: "decimal", dataIndx: "stockQty", width: 50,editable: false,align: 'right' },
        { title: "U/P", dataType: "decimal", dataIndx: "convertedStandardUnitPrice", width: 100,editable: false,align: 'right'    },
               
        { title: "Cost", dataType: "decimal", dataIndx: "cogsLocal", width: 100,editable: false,align: 'right' },
        { title: "Stock Value", dataType: "decimal", dataIndx: "stockValue", width: 120,editable: false, align: 'right' },
        
        { title: "Pr No.", dataType: "string", dataIndx: "prNumber", width: 150,editable: false },
        { title: "Pr No.", dataType: "string", dataIndx: "po", width: 150,editable: false },              
        { title: "SAP#", dataType: "string", dataIndx: "invoiceId", width: 90,editable: false },
        { title: "InvP#", dataType: "string", dataIndx: "vendorInvoice", width: 90,editable: false },
        { title: "Note", dataType: "string", dataIndx: "remarks", width: 200,editable: false },
         ];
    var url = "<?php
    echo $girdUrl;
    ?>";
    var dataModel = {
    		  dataType: "JSON",
              location: "remote",
              method: "GET",
              recIndx: "row_id",
              url: url,
              getData: function (response) {
           	    return { data: response.data, curPage: response.curPage, totalRecords: response.totalRecords};
             },
    };

	var obj = { width: "auto", height: $(window).height()-500, showTitle : true,
			resizable:true,
			//draggable:true,
			sortable: true,
			hoverMode: 'row',
			pageModel: { type: "remote", rPP:100, strRpp: "{0}" },
			columnBorders: true,
			dataModel: dataModel,
			colModel: columns,
		    numberCell: {show:true, resizable: true, width: 40, title: "#", minWidth: 25 },
	        editModel: {
                allowInvalid: true,
                saveKey: $.ui.keyCode.ENTER
            },
            scrollModel: {autoFit:true, flexContent: true},
            editor: {
                select: true
            },
 			change: function (evt, ui) {               
                
                if (ui.source == 'commit' || ui.source == 'rollback') {
                    return;
                }
                console.log(ui);
                var $grid = $(this),
                    grid = $grid.pqGrid('getInstance').grid;
                var rowList = ui.rowList,
                    addList = [],
                    recIndx = grid.option('dataModel').recIndx,
                    deleteList = [],
                    updateList = [];
                
                for (var i = 0; i < rowList.length; i++) {
                    var obj = rowList[i],
                        rowIndx = obj.rowIndx,
                        newRow = obj.newRow,
                        type = obj.type,
                        rowData = obj.rowData;
                     if (type == 'add') {                        
                        var valid = grid.isValid({ rowData: newRow, allowInvalid: true }).valid;
                        if (valid) {
                            addList.push(newRow);
                        }
                    }
                    else if (type == 'update') {                        
                        var valid = grid.isValid({ rowData: rowData, allowInvalid: true }).valid;
                        if (valid) {
                            if (rowData[recIndx] == null) {
                                addList.push(rowData);
                            }
                            //else if (grid.isDirty({rowData: rowData})) {
                            else {
                                updateList.push(rowData);
                          		//alert(rowData[recIndx]  + "remarks: " + rowData.item_name);
                                 
                            }
                        }
                    }
                  }

                  if (addList.length || updateList.length || deleteList.length) {
					var sent_list = JSON.stringify({
                        updateList: updateList,
                        addList: addList,
                        deleteList: deleteList
                    });
                    //alert(sent_list);
                      
                      $.ajax({
                          url: '/procure/pr-row/update-row',
                          data: {
                              sent_list: sent_list
                          },
                          dataType: "json",
                          type: "POST",
                          async: true,
                          beforeSend: function (jqXHR, settings) {
                              //$(".saving", $grid).show();

							  	
                              //$("#global-notice").text("Updating...").show();
                              //alert(updateList[0].item_name  +  updateList[0].row_id);
                          },
                          success: function (changes) {
                              //commit the changes.
                              //alert(changes.updateList);
                               $("#global-notice").text("Updated...").show();
                		      //alert('it is ok');                
                              /* grid.commit({ type: 'add', rows: changes.addList });
                              grid.commit({ type: 'update', rows: changes.updateList });
                              grid.commit({ type: 'delete', rows: changes.deleteList }); */
                          },
                          complete: function () {
                              //$(".saving", $grid).hide();
                              $("#global-notice").delay(2200).fadeOut(500);
                              
                          }
                      });
                  }
                //alert(updateList.length);
               
            },     
	                
       		
   	};

    var $grid = $("#item_trx_gird_div").pqGrid(obj);
    function refreshGird(){
    	$( "#item_trx_gird_div" ).pqGrid( "refreshDataAndView" )
	} 
    
</script>

