<?php
if (count ( $errors ) > 0) {
	echo '<div class="alert alert-danger" role="alert" style="font-size: 10.5pt">';
	
	echo '<ul>';
	foreach ( $errors as $error ) :
	echo '<li>' . $error . '</li>';
	endforeach
	;
	echo '</ul>';
	echo '</div>';
}
?>

<div id="tabs" style="font-size: 9.5pt"> 
 
  <ul>
  	<li ><a href="#general">Project</a></li>
   	<li ><a href="/pm/project-item/list1?token=<?php echo (!$entity == null)? $entity->getToken():"";?>&target_id=<?php echo (!$entity == null)? $entity->getID():"";?>&checksum=<?php echo (!$entity == null)? $entity->getChecksum():"";?>">Items</a></li>
 	<li ><a href="/pm/project-attachment/get-pictures?token=<?php echo (!$entity == null)? $entity->getToken():"";?>&checksum=<?php echo (!$entity == null)? $entity->getChecksum():"";?>&target_id=<?php echo (!$entity == null)? $entity->getID():"";?>">Picture</a></li>
   	<li ><a href="/pm/project-attachment/list1?token=<?php echo (!$entity == null)? $entity->getToken():"";?>&target_id=<?php echo (!$entity == null)? $entity->getID():"";?>&checksum=<?php echo (!$entity == null)? $entity->getChecksum():"";?>">Attachment</a></li>
  </ul>

<div id="general"> 

<form id="project_show_form" class="form-horizontal" action="" method="post" enctype="multipart/form-data">
<input type="hidden" name="redirectUrl" value="<?php echo $redirectUrl ?>" />

	<div class="form-group">
		<label class="control-label col-sm-2" >Project Name:</label>
		<div class="col-sm-3">
			<input class="form-control" type="text"  placeholder=""
				name="projectName" value="<?php echo (!$entity == null)? $entity->getProjectName():"";?>">
		</div>		
	</div>


	<fieldset>
			<legend style="font-size: 10pt; color: gray;">
				<small><span class="glyphicon glyphicon-triangle-right"></span></small>&nbsp;
				<a href="#header" class="" data-toggle="collapse">HEADER:</a>
			</legend>
			<div id="header" class="collapse">
	
	<div class="form-group">
		<label class="control-label col-sm-2" >Keywords:</label>
		<div class="col-sm-3">
			<input class="form-control" type="text"  placeholder=""
				id = "keywords" name="keywords" value="<?php echo (!$entity == null)? $entity->getKeywords():"";?>">
		</div>
	</div>
	
	<div class="form-group">
		<label class="control-label col-sm-2" >Start Date:</label>
		<div class="col-sm-3">
		<input class="form-control" type="text" name="startDate" 
		value="<?php if(!$entity == null): echo ($entity->getStartDate() !== null)? date_format($entity->getStartDate(),"Y-m-d"):""; endif;?>" placeholder =" please select" id="startDate" />
		</div>
		
		<label class="control-label col-sm-2" >End Date:</label>
		<div class="col-sm-3">
		<input class="form-control" type="text" name="endDate" 
		value="<?php if(!$entity == null): echo ($entity->getEndDate() !== null)? date_format($entity->getEndDate(),"Y-m-d"):""; endif;?>" placeholder =" please select" id="endDate" />
		</div>
		
		
	</div>
	
	<div class="form-group">
		<label class="control-label col-sm-2" for="inputTag">Status:</label>
		<div class="col-sm-3">
			<select class="form-control" name="status">
				<option value="">Please select</option>
				<option <?php if(!$entity == null):	echo ($entity->getStatus()=='STARTED')?'selected="selected"':''; endif;?> value="STARTED">STARTED</option>
				<option <?php if(!$entity == null):	echo ($entity->getStatus()=='PENDING')?'selected="selected"':''; endif;?> value="PENDING">PENDING</option>
				<option <?php if(!$entity == null):	echo ($entity->getStatus()=='COMPLETED')?'selected="selected"':''; endif;?> value="COMPLETED">COMPLETED</option>
				
			</select>
		</div>
		
		<label class="control-label col-sm-2" >Remarks:</label>
		<div class="col-sm-3">
			<textarea  class="form-control" type="text" rows="4" placeholder=""
				name="remarks" style="font-size: 9pt;"><?php echo (!$entity == null)? $entity->getRemarks():"";?></textarea>
		</div>
	</div>
	
	<div class="form-group">
		<label class="control-label col-sm-2" for="inputTag"></label>
		<div class="col-sm-3">
<a class="btn btn-default" href="<?php echo $this->baseUrl ?>/pm/project/edit?token=<?php echo (!$entity == null)? $entity->getToken():"";?>&entity_id=<?php echo (!$entity == null)? $entity->getId():"";?>&checksum=<?php echo (!$entity == null)? $entity->getChecksum():"";?>"><small><i class="glyphicon glyphicon-pencil"></i></small>&nbsp;Edit</a>
 		</div>
	</div>
	
	</div>
	</fieldset> 
	
	<fieldset>
			<legend style="font-size: 10pt; color: gray;">
				<small><span class="glyphicon glyphicon-triangle-right"></span></small>&nbsp;
				<a href="#row" class="" data-toggle="collapse">PR ITEM:</a>
			</legend>
			<div id="row" class="collapse in">
				<div id="pr_row_gird" style="margin: 1px;"></div>
			</div>
	</fieldset>
		
	
</form>
</div>
</div>

<script>
$("#project_show_form :input").attr("disabled", "disabled");
//to check whether any row is currently being edited.

function isEditing($grid) {
    var rows = $grid.pqGrid("getRowsByClass", { cls: 'pq-row-edit' });
    if (rows.length > 0) {
        //focus on editor if any 
        $grid.find(".pq-editor-focus").focus();
        return true;
    }
    return false;
}

//called by edit button.
function editRow(rowIndx, $grid) {

    $grid.pqGrid("addClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
    $grid.pqGrid("editFirstCellInRow", { rowIndx: rowIndx });

    //change edit button to update button and delete to cancel.
    var $tr = $grid.pqGrid("getRow", { rowIndx: rowIndx }),
        $btn = $tr.find("button.edit_btn");
    $btn.button("option", { label: "Update", "icons": { primary: "ui-icon-check"} })
        .unbind("click")
        .click(function (evt) {
            evt.preventDefault();
            return update(rowIndx, $grid);
        });
    $btn.next().button("option", { label: "Cancel", "icons": { primary: "ui-icon-cancel"} })
        .unbind("click")
        .click(function (evt) {
            $grid.pqGrid("quitEditMode");
            $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
            $grid.pqGrid("refreshRow", { rowIndx: rowIndx });
            $grid.pqGrid("rollback");
        });
}
//called by update button.
function update(rowIndx, $grid) {

    if ($grid.pqGrid("saveEditCell") == false) {
        return false;
    }

    var isValid = $grid.pqGrid("isValid", { rowIndx: rowIndx }).valid;
    if (!isValid) {
        return false;
    }
    var isDirty = $grid.pqGrid("isDirty");
    if (isDirty) {
        var url,
            rowData = $grid.pqGrid("getRowData", { rowIndx: rowIndx }),
            recIndx = $grid.pqGrid("option", "dataModel.recIndx");

        $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });

        if (rowData[recIndx] == null) {
            //url to add records.
            url = "/pro/products/add";
            //url = "/pro/products.php?pq_add=1";for PHP
        }
        else {
            //url to  update records.
            url = "/pro/products/update";
            //url = "/pro/products.php?pq_update=1";for PHP
        }
        $.ajax($.extend({}, ajaxObj, {
            context: $grid,
            url: url,
            data: rowData,
            success: function (response) {
                var recIndx = this.pqGrid("option", "dataModel.recIndx");
                if (rowData[recIndx] == null) {
                    rowData[recIndx] = response.recId;
                }
                this.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
                this.pqGrid("commit");
            }
        }));
    }
    else {
        $grid.pqGrid("quitEditMode");
        $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
        $grid.pqGrid("refreshRow", { rowIndx: rowIndx });
    }
}
 
  //called by add button in toolbar.
function addRow($grid) {
	 if (isEditing($grid)) {
	        return false;
	    }
	  
	//append empty row in the first row.                            
    var rowData = { Item: "", Quantity: 0, Received: 0, Balance: 0}; //empty row template
    $grid.pqGrid("addRow", { rowIndxPage: 0, rowData: rowData });

    var $tr = $grid.pqGrid("getRow", { rowIndxPage: 0 });
    if ($tr) {
        //simulate click on edit button.
        $tr.find("button.edit_btn").click();
    }
}
var autoCompleteEditor = function (ui) {
    var $inp = ui.$cell.find("input");
    var rowData = ui.rowData;
  
    //initialize the editor
    $inp.autocomplete({
    	source: "/bp/vendor-search/auto-complete",
        minLength: 3,
        select: function( event, ui ) {
      	  //$( "#vendor_id" ).val(ui.item.id);
          //alert	( "Selected: " + ui.item.value + " aka " + ui.item.id );
      	  //alert($( "#vendor_id" ).val());
      	  //alert(ui.item.id);
      	  rowData.vendor_id = ui.item.id;

      	 	$('#global-notice').show();
      		$('#global-notice').html('"' + ui.item.value + '" selected');
      		$('#global-notice').fadeOut(5000);
      		//$("#jquery_dialog").dialog("close");
        }
        })
        .autocomplete( "instance" )._renderItem = function( ul, item ) {
        return $( "<li>" )
          .append( "<div style='padding-bottom: 5px; border-bottom: thin solid gray;'>" + item.value + "<br><span style='color:gray;font-size: 9pt;'>" + item.vendor_country + "<span></div>" )
          .appendTo( ul );
      };
}


//var container_height = $('#main_container').height();
//alert(container_height);
var obj = { width: "100%", height: $(window).height()-350, showTitle : false,
		resizable:true,
		//draggable:true,
		sortable: true,
		hoverMode: 'cell',
	   	pageModel: { type: "remote", rPP: 50, strRpp: "{0}" },
	  	editModel: {
            allowInvalid: true,
            saveKey: $.ui.keyCode.ENTER
        },
        editor: {
            select: true
        },
	 columnBorders: true,
	   toolbar: {
                items: [
                    { type: 'button', icon: 'ui-icon-plus', label: 'Add New Row', listeners: [
                        { "click": function (evt, ui) {
                            var $grid = $(this).closest('.pq-grid');
                            //addRow($grid);
                            
		     redirectUrl="/procure/pr-row/add?token=<?php echo (!$entity == null)? $entity->getToken():"";?>&target_id=<?php echo (!$entity == null)? $entity->getId():"";?>&checksum=<?php echo (!$entity == null)? $entity->getChecksum():"";?>";
          window.location.href= redirectUrl;
                             
                            //debugger;
                        }
                        }
                    ]
                    }
                ]
            },


    change: function (evt, ui) {                
        
        if (ui.source == 'commit' || ui.source == 'rollback') {
            return;
        }
        console.log(ui);
        var $grid = $(this),
            grid = $grid.pqGrid('getInstance').grid;
        var rowList = ui.rowList,
            addList = [],
            recIndx = grid.option('dataModel').recIndx,
            deleteList = [],
            updateList = [];
        
        for (var i = 0; i < rowList.length; i++) {
            var obj = rowList[i],
                rowIndx = obj.rowIndx,
                newRow = obj.newRow,
                type = obj.type,
                rowData = obj.rowData;
             if (type == 'add') {                        
                var valid = grid.isValid({ rowData: newRow, allowInvalid: true }).valid;
                if (valid) {
                    addList.push(newRow);
                }
            }
            else if (type == 'update') {                        
                var valid = grid.isValid({ rowData: rowData, allowInvalid: true }).valid;
                if (valid) {
                    if (rowData[recIndx] == null) {
                        addList.push(rowData);
                    }
                    //else if (grid.isDirty({rowData: rowData})) {
                    else {
                        updateList.push(rowData);
                  		//alert(rowData[recIndx]  + "remarks: " + rowData.item_name);
                         
                    }
                }
            }
          }

          if (addList.length || updateList.length || deleteList.length) {
			var sent_list = JSON.stringify({
                updateList: updateList,
                addList: addList,
                deleteList: deleteList
            });
            //alert(sent_list);
              
              $.ajax({
                  url: '/procure/pr-row/update-row',
                  data: {
                      sent_list: sent_list
                  },
                  dataType: "json",
                  type: "POST",
                  async: true,
                  beforeSend: function (jqXHR, settings) {
                      //$(".saving", $grid).show();

					  	
                      //$("#global-notice").text("Updating...").show();
                      //alert(updateList[0].item_name  +  updateList[0].row_id);
                  },
                  success: function (changes) {
                      //commit the changes.
                      //alert(changes.updateList);
                       $("#global-notice").text("Updated...").show();
        		      //alert('it is ok');                
                      /* grid.commit({ type: 'add', rows: changes.addList });
                      grid.commit({ type: 'update', rows: changes.updateList });
                      grid.commit({ type: 'delete', rows: changes.deleteList }); */
                  },
                  complete: function () {
                      //$(".saving", $grid).hide();
                      $("#global-notice").delay(2200).fadeOut(500);
                      
                  }
              });
          }
        //alert(updateList.length);
       
    },     
              
};

obj.colModel = [
	/*  { title: "vendor", dataType: "string", dataIndx: "vendor", align: 'left',minWidth: 100,editable: true,
         editor: {
         type: "textbox",
         init: autoCompleteEditor
         //type: function (ui) { return dropdowneditor(this, ui); }
     },},
     
   { title: "Vendor_id", dataType: "integer", dataIndx: "vendor_id", width: 7	,editable: true,hidden: true }, */
    { title: "FA Remarks", dataType: "string", dataIndx: "fa_remarks", align: 'left',minWidth: 120,editable: true},
    { title: "Pr No.", dataType: "string", dataIndx: "pr_number", width:150,editable: false },
    
	{ title: "SKU", dataType: "string", dataIndx: "item_sku", width:50,editable: false },
    { title: "Item", dataType: "string", dataIndx: "item_name", width:200,editable: false },
    { title: "Q'ty", dataType: "integer", dataIndx: "quantity", width: 50,align: 'right',editable: false},
    { title: "Price", dataType: "float", dataIndx: "vendor_unit_price", width: 82, align: 'right',editable: false},
    { title: "Total", dataType: "string", dataIndx: "total_price", width:100, align: 'right',editable: false},
    { title: "Curr", dataType: "string", dataIndx: "currency", width:3, align: 'center',editable: false},
    { title: "Vendor", dataType: "string", dataIndx: "vendor_name", width: 90, align: 'left',editable: false},
    { title: "Remarks", dataType: "string", dataIndx: "remarks", align: 'left',minWidth: 150,editable: false},
    
    { title: "", editable: false, minWidth: 200, sortable: false,
        render: function (ui) {
            return "<button type='button' class='edit_btn' ><small><i style='font-style: normal;' class=''>Edit&nbsp;</i></small></button><button type='button' class='receive_btn'><span class='glyphicon glyphicon-plus'>&nbsp;</span><button type='button' class='receive_inline_btn'><span class='glyphicon glyphicon-plus'>&nbsp;</span></button>";
           }
    },
];

obj.dataModel = {
		  dataType: "JSON",
          location: "remote",
          method: "GET",
          recIndx: "row_id",
          url: "/pm/project-item/gird?token=<?php echo (!$entity == null)? $entity->getToken():"";?>&target_id=<?php echo (!$entity == null)? $entity->getId():"";?>&checksum=<?php echo (!$entity == null)? $entity->getChecksum():"";?>",
          getData: function (response) {
       	    return { data: response.data, curPage: response.curPage, totalRecords: response.totalRecords};
         }
};

var $grid = $("#pr_row_gird").pqGrid(obj);

$grid.on('pqgridrefresh pqgridrefreshrow', function () {
    //debugger;
    var $grid = $(this);

    //receive button
    $grid.find("button.receive_btn").button({})
    .unbind("click")
    .bind("click", function (evt) {

        var $tr = $(this).closest("tr"),
        rowIndx = $grid.pqGrid("getRowIndx", { $tr: $tr }).rowIndx;

        rowData = $grid.pqGrid("getRowData", { rowIndx: rowIndx }),
        recIndx = $grid.pqGrid("option", "dataModel.recIndx");

        redirectUrl="/inventory/item-transaction/gr?token="+rowData['row_token']+"&pr_row_id="+rowData['row_id']+"&checksum="+rowData['row_checksum'];
      	//alert(rowData['item_name']);
		
		window.location.href = redirectUrl;
      	//window.open(redirectUrl,'_blank');
    });

    //receive button
    $grid.find("button.edit_btn").button({})
    .unbind("click")
    .bind("click", function (evt) {

        var $tr = $(this).closest("tr"),
        rowIndx = $grid.pqGrid("getRowIndx", { $tr: $tr }).rowIndx;

        rowData = $grid.pqGrid("getRowData", { rowIndx: rowIndx }),
        recIndx = $grid.pqGrid("option", "dataModel.recIndx");

        redirectUrl="/procure/pr-row/edit?token="+rowData['row_token']+"&entity_id="+rowData['row_id']+"&checksum="+rowData['row_checksum'];
      	//alert(redirectUrl);
		window.location.href = redirectUrl;
      	//window.open(redirectUrl,'_blank');
    });

    //receive button
    $grid.find("button.receive_inline_btn").button({})
    .unbind("click")
    .bind("click", function (evt) {
        if (isEditing($grid)) {
            return false;
        }
        var $tr = $(this).closest("tr"),
            rowIndx = $grid.pqGrid("getRowIndx", { $tr: $tr }).rowIndx;
        editRow(rowIndx, $grid);
        return false;
    });

  //receive button
    $grid.find("button.receive_inline_btn").button({})
    .unbind("click")
    .bind("click", function (evt) {

        var $tr = $(this).closest("tr"),
        rowIndx = $grid.pqGrid("getRowIndx", { $tr: $tr }).rowIndx;

        rowData = $grid.pqGrid("getRowData", { rowIndx: rowIndx }),
        recIndx = $grid.pqGrid("option", "dataModel.recIndx");

        redirectUrl="/inventory/item-transaction/gr1?token="+rowData['row_token']+"&pr_row_id="+rowData['row_id']+"&checksum="+rowData['row_checksum'];
      	//alert(rowData['item_name']);
      	
      	//showBootstrapDialog('Select Deparment',redirectUrl,'b_loaded_data');
      	showJqueryDialog('Item Receiving','1000',$(window).height()-100, redirectUrl,'j_loaded_data', true);
      	//window.open(redirectUrl,'_blank');
      	
    });

  //rows which were in edit mode before refresh, put them in edit mode again.
    var rows = $grid.pqGrid("getRowsByClass", { cls: 'pq-row-edit' });
    if (rows.length > 0) {
        var rowIndx = rows[0].rowIndx;
        editRow(rowIndx, $grid);
    }
});        

</script>

