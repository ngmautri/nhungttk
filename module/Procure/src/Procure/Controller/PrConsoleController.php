<?php
namespace Procure\Controller;

use Doctrine\ORM\EntityManager;
use Zend\Mail\Message;
use Zend\Mail\Header\ContentType;
use Zend\Mime\Message as MimeMessage;
use Zend\Mime\Part as MimePart;
use Zend\Mvc\Controller\AbstractActionController;

class PrConsoleController extends AbstractActionController
{

    const BACKUP_FOLDER = "/data/back-up/db";
    protected $doctrineEM;
  
    /**
     *
     * {@inheritdoc}
     * @see \Zend\Mvc\Controller\AbstractActionController::indexAction()
     */
    public function indexAction()
    {}

    /**
     *
     * php c:\1-nmt\1-eclipse\workspace\mla-03\public\index.php validate
     *
     * @return \zend\stdlib\responseinterface|\zend\view\model\viewmodel
     */
    public function validate1Action()
    {
      
    }

    /**
     *
     * php c:\1-nmt\1-eclipse\workspace\mla-02-01\public\index.php validate
     * create enviroment varibles: C:\Program Files\MySQL\MySQL Server 5.7\bin
     * Mysql client need to be installed.
     *
     * @return \zend\stdlib\responseinterface|\zend\view\model\viewmodel
     */
    public function validateAction()
    {
        /**@var \Application\Controller\Plugin\NmtPlugin $nmtPlugin ;*/
        $nmtPlugin = $this->Nmtplugin();
        $dbConfig = $nmtPlugin->getDbConfig();

        $user_name = '';
        $pw = '';

        if (isset($dbConfig['username'])) {
            $user_name = $dbConfig['username'];
        }

        if (isset($dbConfig['password'])) {
            $pw = $dbConfig['password'];
        }

        $os = PHP_OS;
        $fileName = ROOT . self::BACKUP_FOLDER . '/sql_' . date("m-d-Y") . '.sql';
        echo $fileName;

        if ($os == \Application\Model\Constants::OS_LINUX) {
            $exe_string = sprintf('mysqldump -u %s --password=%s mla > %s', $user_name, $pw, $fileName);
        } else {
            $exe_string = sprintf('mysqldump -u %s --password=%s mla --result-file "%s"', $user_name, $pw, $fileName);
        }

        exec($exe_string);
        
        $filesize = filesize($fileName);

        // abtractcontroller is eventmanageraware.
        $this->getEventmanager()->trigger('system.log', __class__, array(
            'priority' => 7,
            'message' => '[OK] database backed up automatically!'
        ));

        $emailText = <<<EOT
<p>Hello</p>
It is to inform, that Database has been updated sucesssfully!<br>
File size: {$filesize} bytes.
<p>

Regards,<br>
MLA Team
</p>
<p>(<em>This Email is generated by the system automatically. Please do not reply!</em>)</p>
EOT;
        $html = new MimePart($emailText);
        $html->type = "text/html";

        $body = new MimeMessage();
        $body->setParts(array(
            $html
        ));

        // build message
        $message = new Message();
        $message->addFrom('mla-web@outlook.com');
        $message->addTo('nmt@mascot.dk');
        $message->setSubject('Database back-up');

        $type = new ContentType();
        $type->setType('text/html');

        $message->getHeaders()->addHeader($type);
        $message->setBody($emailText);
        $message->setEncoding("UTF-8");

        // send message
        $dbConfig = $nmtPlugin->getStmpOutlook()->send($message);
    }

   /**
    * 
    *  @return \Doctrine\ORM\EntityManager
    */
    public function getDoctrineEM()
    {
        return $this->doctrineEM;
    }

 

   /**
    * 
    *  @param EntityManager $doctrineEM
    */
    public function setDoctrineEM(EntityManager $doctrineEM)
    {
        $this->doctrineEM = $doctrineEM;
    }

      
}
