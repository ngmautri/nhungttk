<?php
namespace Procure\Domain\GoodsReceipt;

use Application\Application\Event\DefaultParameter;
use Application\Domain\Shared\Command\CommandOptions;
use Inventory\Domain\Transaction\GenericTrx;
use Inventory\Domain\Transaction\TrxRow;
use Procure\Domain\Contracts\AutoGeneratedDocInterface;
use Procure\Domain\Contracts\ProcureDocType;
use Procure\Domain\Contracts\ProcureGoodsFlow;
use Procure\Domain\Event\Gr\GrReversed;
use Procure\Domain\GoodsReceipt\Repository\GrCmdRepositoryInterface;
use Procure\Domain\GoodsReceipt\Validator\ValidatorFactory;
use Procure\Domain\Service\SharedService;

/**
 *
 * @author Nguyen Mau Tri - ngmautri@gmail.com
 *
 */
class GRReturnFromWHReturn extends GenericGoodsIssue implements AutoGeneratedDocInterface
{

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GoodsReceipt\GenericGR::specify()
     */
    public function specify()
    {
        $this->flow = ProcureGoodsFlow::OUT;
        $this->docType = ProcureDocType::GOODS_RETURN_FROM_WH_RETURN;
    }

    // =====================
    private function __construct()
    {}

    /**
     *
     * @return \Procure\Domain\GoodsReceipt\GRReturn
     */
    public static function getInstance()
    {
        return new self();
    }

    public static function postCopyFromWHReturn(GenericTrx $sourceObj, CommandOptions $options, SharedService $sharedService)
    {
        if (! $sourceObj instanceof GenericTrx) {
            throw new \InvalidArgumentException("WH Return Entity is required");
        }

        $rows = $sourceObj->getDocRows();

        if ($rows == null) {
            throw new \InvalidArgumentException("WH Return  Entity is empty!");
        }

        if ($options == null) {
            throw new \InvalidArgumentException("No Options is found");
        }

        /**
         *
         * @var \Procure\Domain\GoodsReceipt\GRDoc $instance
         */
        $instance = new self();

        $instance = $sourceObj->convertTo($instance);

        $createdBy = $options->getUserId();
        $createdDate = new \DateTime();
        $instance->initDoc($createdBy, date_format($createdDate, 'Y-m-d H:i:s'));

        // overwrite.
        $instance->setDocType(ProcureDocType::RETURN_FROM_WH_RETURN); // important.

        foreach ($rows as $r) {

            /**
             *
             * @var TrxRow $r ;
             */

            $grRow = GRReturnFromWHReturnRow::createFromWHReturnRow($instance, $r, $options);
            $instance->addRow($grRow);
        }

        $validationService = ValidatorFactory::create($instance->getDocType(), $sharedService);
        $instance->validate($validationService->getHeaderValidators(), $validationService->getRowValidators());

        if ($instance->hasErrors()) {
            throw new \RuntimeException($instance->getErrorMessage());
        }

        $instance->clearEvents();

        /**
         *
         * @var GRSnapshot $snapshot
         * @var GrCmdRepositoryInterface $rep ;
         */

        $rep = $sharedService->getPostingService()->getCmdRepository();
        $snapshot = $rep->post($instance, true);

        if (! $snapshot instanceof GRSnapshot) {
            throw new \RuntimeException(sprintf("Error orcured when creating GR from AP reversal #%s", $sourceObj->getId()));
        }

        $target = $snapshot;
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($snapshot->getId());
        $defaultParams->setTargetToken($snapshot->getToken());
        $defaultParams->setTargetDocVersion($snapshot->getDocVersion());
        $defaultParams->setTargetRrevisionNo($snapshot->getRevisionNo());
        $defaultParams->setTriggeredBy($options->getTriggeredBy());
        $defaultParams->setUserId($options->getUserId());
        $params = null;
        $event = new GrReversed($target, $defaultParams, $params);
        $instance->addEvent($event);

        $instance->updateIdentityFrom($snapshot);
        $instance->specify(); // important
        return $instance;
    }
}