<?php
namespace Procure\Domain\GoodsReceipt;

use Application\Application\Event\DefaultParameter;
use Application\Domain\Shared\Command\CommandOptions;
use Procure\Domain\AccountPayable\APDoc;
use Procure\Domain\AccountPayable\APRow;
use Procure\Domain\AccountPayable\GenericAP;
use Procure\Domain\Contracts\AutoGeneratedDocInterface;
use Procure\Domain\Contracts\ProcureDocType;
use Procure\Domain\Contracts\ProcureGoodsFlow;
use Procure\Domain\Contracts\ReversalDocInterface;
use Procure\Domain\Event\Gr\GrReversed;
use Procure\Domain\GoodsReceipt\Repository\GrCmdRepositoryInterface;
use Procure\Domain\GoodsReceipt\Validator\ValidatorFactory;
use Procure\Domain\Service\SharedService;
use Procure\Domain\Service\Contracts\ValidationServiceInterface;
use Procure\Domain\Shared\ProcureDocStatus;
use Webmozart\Assert\Assert;

/**
 *
 * @author Nguyen Mau Tri - ngmautri@gmail.com
 *
 */
class GRReversalFromAPReserval extends GenericGoodsReceipt implements ReversalDocInterface, AutoGeneratedDocInterface
{

    private function __construct()
    {}

    /**
     *
     * @return \Procure\Domain\GoodsReceipt\GRFromAP
     */
    public static function getInstance()
    {
        return new self();
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GoodsReceipt\GenericGR::specify()
     */
    public function specify()
    {
        $this->flow = ProcureGoodsFlow::OUT;
        $this->docType = ProcureDocType::GR_REVERSAL_FROM_AP_RESERVAL;
    }

    /**
     *
     * @param APDoc $sourceObj
     * @param CommandOptions $options
     * @param ValidationServiceInterface $validationService
     * @param SharedService $sharedService
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @return \Procure\Domain\GoodsReceipt\GRDoc
     */
    public static function postCopyFromAPReversal(GenericAP $sourceObj, CommandOptions $options, SharedService $sharedService)
    {
        Assert::isInstanceOf($sourceObj, GenericAP::class, sprintf("Generic AP Entity is required"));
        Assert::eq($sourceObj->getDocStatus(), ProcureDocStatus::REVERSED, sprintf("AP is not reversed yet! %s", $sourceObj->getId()));

        $rows = $sourceObj->getDocRows();
        Assert::notNull($rows, "AP reversal Entity is empty!");

        Assert::notNull($options, "Command options not found");

        /**
         *
         * @var \Procure\Domain\GoodsReceipt\GRDoc $instance
         */
        $instance = new self();

        $instance = $sourceObj->convertTo($instance);

        // overwrite.
        $instance->specify(); // important.
        $validationService = ValidatorFactory::createForPosting($instance->getDocType(), $sharedService);

        $createdBy = $options->getUserId();
        $createdDate = new \DateTime();
        $instance->initDoc($options);
        $instance->setBaseDocId($sourceObj->getId()); // important.
        $instance->setBaseDocType($sourceObj->getDocType()); // important.
        $instance->markAsReversed($createdBy, $sourceObj->getReversalDate());
        $instance->setInvoiceNo($sourceObj->getDocNumber());
        $instance->setRemarks(\sprintf("[Auto.] Ref.AP Reversal %s", $sourceObj->getId()));

        foreach ($rows as $r) {

            /**
             *
             * @var APRow $r ;
             */

            $grRow = GRRow::copyFromApRowReserval($instance, $r, $options);
            $grRow->markRowAsReversed($instance, $options);
            $instance->addRow($grRow);
        }

        $instance->validate($validationService);

        if ($instance->hasErrors()) {
            throw new \RuntimeException($instance->getErrorMessage());
        }

        $instance->clearEvents();

        /**
         *
         * @var GRSnapshot $rootSnapshot
         * @var GrCmdRepositoryInterface $rep
         */

        $rep = $sharedService->getPostingService()->getCmdRepository();
        $snapshot = $rep->post($instance, true);

        $target = $snapshot;
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($snapshot->getId());
        $defaultParams->setTargetToken($snapshot->getToken());
        $defaultParams->setTargetDocVersion($snapshot->getDocVersion());
        $defaultParams->setTargetRrevisionNo($snapshot->getRevisionNo());
        $defaultParams->setTriggeredBy($options->getTriggeredBy());
        $defaultParams->setUserId($options->getUserId());
        $params = null;
        $event = new GrReversed($target, $defaultParams, $params);
        $instance->addEvent($event);

        $instance->updateIdentityFrom($snapshot);
        return $instance;
    }
}