<?php
namespace Procure\Domain\GoodsReceipt;

use Application\Application\Event\DefaultParameter;
use Application\Domain\Shared\DTOFactory;
use Application\Domain\Shared\SnapshotAssembler;
use Application\Domain\Shared\Command\CommandOptions;
use Application\Domain\Util\SimpleCollection;
use Application\Domain\Util\Translator;
use Doctrine\Common\Collections\ArrayCollection;
use Procure\Application\DTO\Gr\GrDetailsDTO;
use Procure\Domain\RowSnapshot;
use Procure\Domain\Contracts\AutoGeneratedDocInterface;
use Procure\Domain\Contracts\ReversalDocInterface;
use Procure\Domain\Event\Gr\GrPosted;
use Procure\Domain\Event\Gr\GrReversed;
use Procure\Domain\Event\Gr\GrRowAdded;
use Procure\Domain\Event\Gr\GrRowRemoved;
use Procure\Domain\Event\Gr\GrRowUpdated;
use Procure\Domain\Exception\Gr\GrInvalidOperationException;
use Procure\Domain\GoodsReceipt\Factory\GRFactory;
use Procure\Domain\GoodsReceipt\Repository\GrCmdRepositoryInterface;
use Procure\Domain\GoodsReceipt\Validator\ValidatorFactory;
use Procure\Domain\Service\SharedService;
use Procure\Domain\Service\Contracts\ValidationServiceInterface;
use Procure\Domain\Shared\ProcureDocStatus;
use Procure\Domain\Validator\HeaderValidatorCollection;
use Ramsey\Uuid\Uuid;
use Webmozart\Assert\Assert;

/**
 *
 * @author Nguyen Mau Tri - ngmautri@gmail.com
 *
 */
abstract class GenericGR extends BaseDoc
{

    abstract public function specify();

    // ===========

    /**
     *
     * @param GRRow $row
     * @param CommandOptions $options
     * @param SharedService $sharedService
     * @return \Procure\Domain\GoodsReceipt\GrRowSnapshot
     */
    public function removeRow(GRRow $row, CommandOptions $options, SharedService $sharedService)
    {
        Assert::notEq($this->getDocStatus(), ProcureDocStatus::POSTED, sprintf("PO is posted already! %s", $this->getId()));
        Assert::notNull($options, "command options not found");

        /**
         *
         * @var GrRowSnapshot $localSnapshot
         * @var GrCmdRepositoryInterface $rep ;
         */

        $rep = $sharedService->getPostingService()->getCmdRepository();
        $localSnapshot = $rep->removeRow($this, $row);

        $params = [
            "rowId" => $localSnapshot->getId(),
            "rowToken" => $localSnapshot->getToken()
        ];

        $target = $this->makeSnapshot();
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($this->getId());
        $defaultParams->setTargetToken($this->getToken());
        $defaultParams->setTargetDocVersion($this->getDocVersion());
        $defaultParams->setTargetRrevisionNo($this->getRevisionNo());
        $defaultParams->setTriggeredBy($options->getTriggeredBy());
        $defaultParams->setUserId($options->getUserId());

        $event = new GrRowRemoved($target, $defaultParams, $params);
        $this->addEvent($event);

        return $localSnapshot;
    }

    protected $rowSnapshotCollection;

    protected function setRowSnapshotCollection($rowSnapshotCollection)
    {
        $this->rowSnapshotCollection = $rowSnapshotCollection;
    }

    /**
     *
     * @return NULL|\Doctrine\Common\Collections\ArrayCollection[]
     */
    public function slipRowsByWarehouse()
    {
        $rowsCollection = $this->getLazyRowSnapshotCollection();
        if ($rowsCollection == null) {
            return null;
        }

        $results = [];

        /**
         *
         * @var RowSnapshot $fistRowSnapshot
         */

        $first = $rowsCollection->first();
        $fistRowSnapshot = $first();
        $wh = $fistRowSnapshot->getWarehouse();
        $rowsOfWarehouse = new ArrayCollection();
        $n = 0;
        foreach ($rowsCollection as $row) {

            /**
             *
             * @var RowSnapshot $rowSnapshot
             */
            $rowSnapshot = $row();
            $n ++;

            if ($rowSnapshot->getWarehouse() == $wh) {
                $rowsOfWarehouse->add($rowSnapshot);
            } else {
                $results[$wh] = $rowsOfWarehouse;

                $wh = $rowSnapshot->getWarehouse();
                $rowsOfWarehouse = new ArrayCollection();
                $rowsOfWarehouse->add($rowSnapshot);

                if ($n == $rowsCollection->count()) {
                    $results[$wh] = $rowsOfWarehouse;
                }
            }
        }

        return $results;
    }

    /**
     *
     * @return NULL[]|\Procure\Domain\GoodsReceipt\GenericGR[]
     */
    public function createSubDocumentByWarehouse()
    {
        $subDocuments = [];
        $results = $this->slipRowsByWarehouse();
        foreach ($results as $k => $v) {
            $doc = GRFactory::createEmptyObject($this->getDocType());
            $this->convertTo($doc);

            $createdDate = new \DateTimeImmutable();

            // enrichment
            $doc->setUuid(Uuid::uuid4()->toString());
            $doc->setToken($this->getUuid());
            $doc->setCreatedOn(date_format($createdDate, 'Y-m-d H:i:s'));
            $doc->setCreatedBy($this->getCreatedBy());

            $doc->setSysNumber(\sprintf("%s-WH%s", $this->getSysNumber(), $k));
            $doc->setRemarks(\sprintf("%s-WH%s", $this->getRemarks(), $k));
            $doc->setWarehouse($k);
            $doc->setRowSnapshotCollection($v);
            $subDocuments[] = $doc;
        }

        return $subDocuments;
    }

    public function slipByDepartment()
    {
        $results = new SimpleCollection();

        if ($this->getTargetDepartmentList() == null) {
            return null;
        }

        foreach ($this->getDocRows() as $row) {
            /**
             *
             * @var GRRow $row ;
             */
            $dept = $row->getPrDepartment();

            if ($dept == null) {
                $dept = - 1;
            }
            $results->addChild($dept, $row);
        }

        return $results;
    }

    /**
     *
     * @param GRRowSnapshot $snapshot
     * @param CommandOptions $options
     * @param SharedService $sharedService
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @return \Procure\Domain\GoodsReceipt\GRRowSnapshot
     */
    public function createRowFrom(GRRowSnapshot $snapshot, CommandOptions $options, SharedService $sharedService)
    {
        Assert::notEq($this->getDocStatus(), ProcureDocStatus::POSTED, sprintf("GR is already posted %s", $this->getId()));
        Assert::notNull($snapshot, "Row Snapshot not founds");
        Assert::notNull($options, "Options not founds");

        $validationService = ValidatorFactory::create($sharedService);
        $snapshot->docType = $this->getDocType();
        $snapshot->initRow($options);

        $row = GRRow::createFromSnapshot($this, $snapshot);

        $validationService = ValidatorFactory::create($this->getDocType(), $sharedService);
        $this->validateRow($row, $validationService->getRowValidators());

        if ($this->hasErrors()) {
            throw new \RuntimeException($this->getNotification()->errorMessage());
        }

        $this->clearEvents();

        /**
         *
         * @var GRRowSnapshot $localSnapshot
         * @var GrCmdRepositoryInterface $rep
         */
        $rep = $sharedService->getPostingService()->getCmdRepository();
        $localSnapshot = $rep->storeRow($this, $row);

        $params = [
            "rowId" => $localSnapshot->getId(),
            "rowToken" => $localSnapshot->getToken()
        ];

        $target = $this->makeSnapshot();
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($this->getId());
        $defaultParams->setTargetToken($this->getToken());
        $defaultParams->setTargetDocVersion($this->getDocVersion());
        $defaultParams->setTargetRrevisionNo($this());
        $defaultParams->setUserId($options->getUserId());

        $event = new GrRowAdded($target, $defaultParams, $params);
        $this->addEvent($event);

        return $localSnapshot;
    }

    /**
     *
     * @param GRRowSnapshot $snapshot
     * @param CommandOptions $options
     * @param array $params
     * @param SharedService $sharedService
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @return \Procure\Domain\GoodsReceipt\GRRowSnapshot
     */
    public function updateRowFrom(GRRowSnapshot $snapshot, CommandOptions $options, $params, SharedService $sharedService)
    {
        Assert::notEq($this->getDocStatus(), ProcureDocStatus::POSTED, sprintf("GR is already posted %s", $this->getId()));
        Assert::notNull($snapshot, "Row Snapshot not founds");
        Assert::notNull($options, "Options not founds");

        $createdDate = new \Datetime();
        $createdBy = $options->getUserId();
        $snapshot->markAsChange($createdBy, date_format($createdDate, 'Y-m-d H:i:s'));

        $row = GrRow::createFromSnapshot($this, $snapshot);

        $validationService = ValidatorFactory::create($this->getDocType(), $sharedService);

        $this->validateRow($row, $validationService->getRowValidators());

        if ($this->hasErrors()) {
            throw new \RuntimeException($this->getNotification()->errorMessage());
        }

        $this->clearEvents();

        /**
         *
         * @var GRRowSnapshot $localSnapshot
         * @var GrCmdRepositoryInterface $rep
         */
        $rep = $sharedService->getPostingService()->getCmdRepository();
        $localSnapshot = $rep->storeRow($this, $row);

        $target = $this->makeSnapshot();
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($this->getId());
        $defaultParams->setTargetToken($this->getToken());
        $defaultParams->setTargetDocVersion($this->getDocVersion());
        $defaultParams->setTargetRrevisionNo($this());
        $defaultParams->setUserId($options->getUserId());

        $event = new GrRowUpdated($target, $defaultParams, $params);
        $this->addEvent($event);

        return $localSnapshot;
    }

    /**
     *
     * @param CommandOptions $options
     * @param ValidationServiceInterface $validationService
     * @param SharedService $sharedService
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @return \Procure\Domain\GoodsReceipt\GenericGR
     */
    public function post(CommandOptions $options, SharedService $sharedService)
    {
        if ($this instanceof AutoGeneratedDocInterface) {
            $f = Translator::translate("Manual posting is not allowed on this document type! %s");
            throw new \InvalidArgumentException(Translator::translate(sprintf($f, $this->getDocType())));
        }

        if ($this->getDocStatus() != ProcureDocStatus::DRAFT) {
            $f = Translator::translate("Document is already posted/closed or being amended! %s");
            throw new \InvalidArgumentException((sprintf($f, $this->getDocStatus())));
        }

        $validationService = ValidatorFactory::createForPosting($this->getDocType(), $sharedService);

        $this->validate($validationService);
        if ($this->hasErrors()) {
            throw new \RuntimeException($this->getErrorMessage());
        }

        $this->clearEvents();

        // template
        $this->prePost($options, $validationService, $sharedService);
        $this->doPost($options, $validationService, $sharedService);
        $this->afterPost($options, $validationService, $sharedService);

        $target = $this->makeSnapshot();
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($this->getId());
        $defaultParams->setTargetToken($this->getToken());
        $defaultParams->setTargetDocVersion($this->getDocVersion());
        $defaultParams->setTargetRrevisionNo($this->getRevisionNo());
        $defaultParams->setUserId($options->getUserId());
        $params = [];

        $event = new GrPosted($target, $defaultParams, $params);
        $this->addEvent($event);

        return $this;
    }

    /**
     *
     * @param CommandOptions $options
     * @param ValidationServiceInterface $validationService
     * @param SharedService $sharedService
     * @throws GrInvalidOperationException
     * @throws \RuntimeException
     * @return \Procure\Domain\GoodsReceipt\GenericGR
     */
    public function reverse(CommandOptions $options, SharedService $sharedService)
    {
        if ($this instanceof ReversalDocInterface) {
            $f = Translator::translate("Docuemnt is already reversed! %s");
            throw new \InvalidArgumentException(Translator::translate(sprintf($f, $this->getDocType())));
        }

        if ($this instanceof AutoGeneratedDocInterface) {
            $f = Translator::translate("Manual reserval is not allowed on this document type! %s");
            throw new \InvalidArgumentException(Translator::translate(sprintf($f, $this->getDocType())));
        }

        if ($this->getDocStatus() != ProcureDocStatus::POSTED) {
            $f = Translator::translate("Document is not posted yet! %s");
            throw new \InvalidArgumentException((sprintf($f, $this->getDocStatus())));
        }

        $validationService = ValidatorFactory::createForPosting($this->getDocType(), $sharedService);
        if ($this->hasErrors()) {
            throw new \RuntimeException($this->getErrorMessage());
        }

        $this->clearEvents();

        $this->preReserve($options, $validationService, $sharedService);
        $this->doReverse($options, $validationService, $sharedService);
        $this->afterReserve($options, $validationService, $sharedService);

        $target = $this->makeSnapshot();
        $defaultParams = new DefaultParameter();
        $defaultParams->setTargetId($this->getId());
        $defaultParams->setTargetToken($this->getToken());
        $defaultParams->setTargetDocVersion($this->getDocVersion());
        $defaultParams->setTargetRrevisionNo($this());
        $defaultParams->setUserId($options->getUserId());
        $params = [];
        $event = new GrReversed($target, $defaultParams, $params);
        $this->addEvent($event);
        return $this;
    }

    /**
     *
     * @param HeaderValidatorCollection $headerValidators
     * @param boolean $isPosting
     * @throws \InvalidArgumentException
     */
    public function validateHeader(HeaderValidatorCollection $headerValidators, $isPosting = false)
    {
        if (! $headerValidators instanceof HeaderValidatorCollection) {
            throw new \InvalidArgumentException("GR Validators not given!");
        }

        $headerValidators->validate($this);
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::makeSnapshot()
     */
    public function makeSnapshot()
    {
        return SnapshotAssembler::createSnapshotFrom($this, new GRSnapshot());
    }

    /**
     *
     * @return NULL|object
     */
    public function makeDetailsDTO()
    {
        $dto = new GrDetailsDTO();
        $dto = DTOFactory::createDTOFrom($this, $dto);
        return $dto;
    }

    /**
     *
     * @return NULL|object
     */
    public function makeHeaderDTO()
    {
        $dto = new GrDetailsDTO();
        $dto = DTOFactory::createDTOFrom($this, $dto);
        return $dto;
    }

    /**
     *
     * @param object $dto
     * @return NULL|object
     */
    public function makeDTOForGrid()
    {
        $dto = new GRSnapshot();
        $dto = DTOFactory::createDTOFrom($this, $dto);
        $rowDTOList = [];
        if (count($this->docRows) > 0) {
            foreach ($this->docRows as $row) {

                if ($row instanceof GRRow) {
                    $rowDTOList[] = $row->makeDetailsDTO();
                }
            }
        }

        $dto->docRowsDTO = $rowDTOList;
        return $dto;
    }

    /**
     *
     * @return mixed
     */
    public function getRowSnapshotCollection()
    {
        return $this->rowSnapshotCollection;
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::afterPost()
     */
    protected function afterPost(\Application\Domain\Shared\Command\CommandOptions $options, \Procure\Domain\Service\Contracts\ValidationServiceInterface $validationService, \Procure\Domain\Service\Contracts\SharedServiceInterface $sharedService)
    {
        // TODO Auto-generated method stub
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::afterReserve()
     */
    protected function afterReserve(\Application\Domain\Shared\Command\CommandOptions $options, \Procure\Domain\Service\Contracts\ValidationServiceInterface $validationService, \Procure\Domain\Service\Contracts\SharedServiceInterface $sharedService)
    {
        // TODO Auto-generated method stub
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::doPost()
     */
    protected function doPost(\Application\Domain\Shared\Command\CommandOptions $options, \Procure\Domain\Service\Contracts\ValidationServiceInterface $validationService, \Procure\Domain\Service\Contracts\SharedServiceInterface $sharedService)
    {
        // TODO Auto-generated method stub
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::doReverse()
     */
    protected function doReverse(\Application\Domain\Shared\Command\CommandOptions $options, \Procure\Domain\Service\Contracts\ValidationServiceInterface $validationService, \Procure\Domain\Service\Contracts\SharedServiceInterface $sharedService)
    {
        // TODO Auto-generated method stub
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::prePost()
     */
    protected function prePost(\Application\Domain\Shared\Command\CommandOptions $options, \Procure\Domain\Service\Contracts\ValidationServiceInterface $validationService, \Procure\Domain\Service\Contracts\SharedServiceInterface $sharedService)
    {
        // TODO Auto-generated method stub
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::preReserve()
     */
    protected function preReserve(\Application\Domain\Shared\Command\CommandOptions $options, \Procure\Domain\Service\Contracts\ValidationServiceInterface $validationService, \Procure\Domain\Service\Contracts\SharedServiceInterface $sharedService)
    {
        // TODO Auto-generated method stub
    }

    /**
     *
     * {@inheritdoc}
     * @see \Procure\Domain\GenericDoc::raiseEvent()
     */
    protected function raiseEvent()
    {
        // TODO Auto-generated method stub
    }
}
