<?php
namespace Procure\Form\PR;

use Application\Domain\Util\Translator;
use Application\Form\Contracts\GenericForm;
use Application\Form\Helper\DefaultOptions;
use Procure\Form\Helper\DefaultProcureOptions;
use Zend\Form\Element\Hidden;
use Zend\Form\Element\Select;

/**
 *
 * @author Nguyen Mau Tri - ngmautri@gmail.com
 *        
 */
class PRRowCollectionFilterForm extends GenericForm
{

    private $accountOptions;

    public function __construct($id = null)
    {
        parent::__construct($id);
        $this->id = $id;
        $this->setAttribute('method', 'get');
        $this->setAttribute('class', 'form-horizontal');
    }

    public function setAction($url)
    {
        $this->setAttribute('action', $url);
        return $this;
    }

    /*
     * |=============================
     * |Autogenerate Element
     * |
     * |=============================
     */

    /**
     *
     * {@inheritdoc}
     * @see \Application\Form\Contracts\GenericForm::addElements()
     */
    protected function addElements()
    {
        // no thing
    }

    /*
     * |=============================
     * | Manual Element
     * |
     * |=============================
     */

    /**
     *
     * {@inheritdoc}
     * @see \Application\Form\Contracts\GenericForm::addManualElements()
     */
    protected function addManualElements()
    {

        // ======================================
        // Form Element for {renderType}
        // ======================================
        $this->add([
            'type' => Hidden::class, // to update, if needed
            'name' => 'renderType'
        ]);

        // ======================================
        // Form Element for {resultPerPage}
        // ======================================

        // select
        $select = new Select();
        $select->setName("resultPerPage");
        $select->setAttributes([
            'id' => 'resultPerPage',
            'class' => "form-control input-sm chosen-select",
            'required' => true
        ]);

        $select->setOptions([
            'label' => Translator::translate('Result Per Page'),
            'label_attributes' => [
                'class' => 'control-label col-sm-2'
            ]
        ]);
        // $select->setEmptyOption(Translator::translate('Parent Account Number'));
        $select->setValueOptions(DefaultOptions::createResultPerPageOption());
        // $select->setDisableInArrayValidator(false);
        $this->add($select);

        // ======================================
        // Form Element for {balance}
        // ======================================
        // select
        $select = new Select();
        $select->setName("balance");
        $select->setAttributes([
            'id' => 'balance',
            'class' => "form-control input-sm chosen-select",
            'required' => true
        ]);

        $select->setOptions([
            'label' => Translator::translate('Status'),
            'label_attributes' => [
                'class' => 'control-label col-sm-2'
            ]
            // 'empty_option' => 'Please choose a month'
        ]);
        $select->setValueOptions(DefaultProcureOptions::createPRRowBalanceOption());
        $this->add($select);

        // ======================================
        // Form Element for {Sort}
        // ======================================
        // select
        $select = new Select();
        $select->setName("Sort");
        $select->setAttributes([
            'id' => 'docStatus',
            'class' => "form-control input-sm chosen-select",
            'required' => true
        ]);

        $select->setOptions([
            'label' => Translator::translate('Sort'),
            'label_attributes' => [
                'class' => 'control-label col-sm-2'
            ]
        ]);

        $select->setValueOptions(DefaultOptions::createSQLSortOption());
        $this->add($select);
    }

    /*
     * |=============================
     * | Function to get Form Elements
     * | Autogenerated
     * |
     * |=============================
     */
    public function getBalance()
    {
        return $this->get("balance");
    }

    public function getSortBy()
    {
        return $this->get("sortBy");
    }

    public function getSort()
    {
        return $this->get("sort");
    }

    /*
     * |=============================
     * | Function to get Form Elements
     * | Manual
     * |
     * |=============================
     */
    public function getResultPerPage()
    {
        return $this->get("resultPerPage");
    }
}
